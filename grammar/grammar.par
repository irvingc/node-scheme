/~ Scheme interpreter written in JS/CC ~/
[* 
var Scheme = require('../lib/definitions');
*]

/~ Ignore whitespace ~/
! 	'[ \t]+|[ \t]*;.*'
	;
/~ Grammar tokens ~/
	'[A-Za-z\*][^ \)\(]*|\+|-'	IDENTIFIER	[* %match = new Scheme.Symbol(%match); *]
	'[0-9]+|[0-9]+\.[0-9]*|[0-9]*\.[0-9]+'		NUMBER		[* %match = new Scheme.Number(%match); *]
	'"[^"]*"'					STRING		[* %match = new Scheme.String(%match); *]
	'\('
	'\)'
	'\.'
	;
##
program: form				[* Scheme.addProgramTree(%1); *]
	;
form: expression
	;
expression: application
	| variable
	| constant
	;
application: '(' ')'			[* %% = new Scheme.Null(); *]
	| '(' expressions ')'		[* %% = %2; *]
	| '(' expressions '.' form ')'	[* Scheme.Helpers.append(%2, %4); %% = %2; *]
	;
expressions: expression expressions	[* %% = new Scheme.Cons(%1, %2); *]
	| expression			[* %% = new Scheme.Cons(%1); *]
	;
variable : IDENTIFIER
	;
constant: NUMBER
	| STRING
	;
	

/~ Let's export our parsing prowess ~/

[*

//##PREFIX##_dbg_withtrace = true;
//##PREFIX##_dbg_withparsetree = true;
//##PREFIX##_dbg_withstepbystep = true;

Scheme.parse = __##PREFIX##parse;
module.exports = Scheme;


*]
